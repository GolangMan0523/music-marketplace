{"version":3,"file":"hls-provider-ebcb6c6a.mjs","sources":["../../../common/resources/client/player/providers/hls-provider.tsx"],"sourcesContent":["import {useCallback, useContext, useEffect, useRef, useState} from 'react';\r\nimport {PlayerStoreContext} from '@common/player/player-context';\r\nimport {usePlayerStore} from '@common/player/hooks/use-player-store';\r\nimport Hls, {LevelLoadedData} from 'hls.js';\r\nimport {useHtmlMediaInternalState} from '@common/player/providers/html-media/use-html-media-internal-state';\r\nimport {useHtmlMediaEvents} from '@common/player/providers/html-media/use-html-media-events';\r\nimport {useHtmlMediaApi} from '@common/player/providers/html-media/use-html-media-api';\r\nimport {HlsMediaItem} from '@common/player/media-item';\r\nimport {AudioTrack} from '@common/player/state/player-state';\r\n\r\nexport default function HlsProvider() {\r\n  const store = useContext(PlayerStoreContext);\r\n  const cuedMedia = usePlayerStore(s => s.cuedMedia) as HlsMediaItem;\r\n\r\n  // html medial element state\r\n  const videoRef = useRef<HTMLVideoElement>(null!);\r\n  const htmlMediaState = useHtmlMediaInternalState(videoRef);\r\n  const htmlMediaEvents = useHtmlMediaEvents(htmlMediaState);\r\n  const htmlMediaApi = useHtmlMediaApi(htmlMediaState);\r\n\r\n  // need both so we can \"loadSource\" when hls is ready, while keeping other callbacks stable\r\n  const hls = useRef<Hls | undefined>();\r\n  const [hlsReady, setHlsReady] = useState(false);\r\n\r\n  const destroyHls = useCallback(() => {\r\n    if (hls) {\r\n      hls.current?.destroy();\r\n      hls.current = undefined;\r\n      setHlsReady(false);\r\n    }\r\n  }, []);\r\n\r\n  const setupHls = useCallback(() => {\r\n    if (!Hls.isSupported()) {\r\n      store.getState().emit('error', {fatal: true});\r\n      return;\r\n    }\r\n\r\n    const hlsInstance = new Hls({\r\n      startLevel: -1,\r\n    });\r\n\r\n    hlsInstance.on(Hls.Events.ERROR, (event: any, data: any) => {\r\n      if (data.fatal) {\r\n        switch (data.type) {\r\n          case Hls.ErrorTypes.NETWORK_ERROR:\r\n            hlsInstance.startLoad();\r\n            break;\r\n          case Hls.ErrorTypes.MEDIA_ERROR:\r\n            hlsInstance.recoverMediaError();\r\n            break;\r\n          default:\r\n            destroyHls();\r\n            break;\r\n        }\r\n      }\r\n\r\n      store.getState().emit('error', {sourceEvent: data, fatal: data.fatal});\r\n    });\r\n\r\n    hlsInstance.on(Hls.Events.MANIFEST_PARSED, () => {\r\n      if (!hlsInstance.levels?.length) return;\r\n\r\n      store.getState().emit('playbackQualities', {\r\n        qualities: ['auto', ...hlsInstance.levels.map(levelToPlaybackQuality)],\r\n      });\r\n\r\n      store.getState().emit('playbackQualityChange', {quality: 'auto'});\r\n    });\r\n\r\n    hlsInstance.on(Hls.Events.AUDIO_TRACK_SWITCHED, (eventType, data) => {\r\n      const track = store.getState().audioTracks.find(t => t.id === data.id);\r\n      if (track) {\r\n        store.getState().emit('currentAudioTrackChange', {trackId: track.id});\r\n      }\r\n    });\r\n\r\n    hlsInstance.on(\r\n      Hls.Events.LEVEL_LOADED,\r\n      (eventType: string, data: LevelLoadedData) => {\r\n        if (!store.getState().providerReady) {\r\n          const {type, live, totalduration: duration} = data.details;\r\n          const inferredStreamType = live\r\n            ? type === 'EVENT' && Number.isFinite(duration)\r\n              ? 'live:dvr'\r\n              : 'live'\r\n            : 'on-demand';\r\n          store.getState().emit('streamTypeChange', {\r\n            streamType:\r\n              (store.getState().cuedMedia as HlsMediaItem)?.streamType ||\r\n              inferredStreamType,\r\n          });\r\n          store.getState().emit('durationChange', {duration});\r\n\r\n          const audioTracks: AudioTrack[] = hlsInstance.audioTracks.map(\r\n            track => ({\r\n              id: track.id,\r\n              label: track.name,\r\n              language: track.lang || '',\r\n              kind: 'main',\r\n            })\r\n          );\r\n          store.getState().emit('audioTracks', {tracks: audioTracks});\r\n        }\r\n      }\r\n    );\r\n\r\n    hlsInstance.attachMedia(videoRef.current);\r\n\r\n    hls.current = hlsInstance;\r\n    // trigger initial load source\r\n    setHlsReady(true);\r\n  }, [destroyHls, store]);\r\n\r\n  // setup and destroy hls on mount and unmount\r\n  useEffect(() => {\r\n    setupHls();\r\n    return () => {\r\n      destroyHls();\r\n    };\r\n  }, [setupHls, destroyHls]);\r\n\r\n  // load source via hls when media src changes and hls is ready\r\n  useEffect(() => {\r\n    if (\r\n      hls.current &&\r\n      cuedMedia?.src &&\r\n      (hls.current as any).url !== cuedMedia?.src\r\n    ) {\r\n      hls.current.loadSource(cuedMedia.src);\r\n    }\r\n  }, [cuedMedia?.src, hlsReady]);\r\n\r\n  useEffect(() => {\r\n    if (!hlsReady) return;\r\n    store.setState({\r\n      providerApi: {\r\n        ...htmlMediaApi,\r\n        setCurrentAudioTrack: (trackId: number) => {\r\n          if (!hls.current) return;\r\n          hls.current.audioTrack = trackId;\r\n        },\r\n        setPlaybackQuality: (quality: string) => {\r\n          if (!hls.current) return;\r\n          hls.current.currentLevel = hls.current.levels.findIndex(\r\n            level => levelToPlaybackQuality(level) === quality\r\n          );\r\n          store.getState().emit('playbackQualityChange', {quality});\r\n        },\r\n      },\r\n    });\r\n  }, [htmlMediaApi, store, hlsReady]);\r\n\r\n  return (\r\n    <video\r\n      className=\"h-full w-full\"\r\n      ref={videoRef}\r\n      playsInline\r\n      poster={cuedMedia?.poster}\r\n      {...htmlMediaEvents}\r\n    />\r\n  );\r\n}\r\n\r\nconst levelToPlaybackQuality = (level: any) => {\r\n  return level === -1 ? 'auto' : `${level.height}p`;\r\n};\r\n"],"names":[],"mappings":"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"}