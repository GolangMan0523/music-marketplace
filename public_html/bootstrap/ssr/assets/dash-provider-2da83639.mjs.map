{"version":3,"file":"dash-provider-2da83639.mjs","sources":["../../../common/resources/client/player/providers/dash-provider.tsx"],"sourcesContent":["import {useCallback, useContext, useEffect, useRef, useState} from 'react';\r\nimport {PlayerStoreContext} from '@common/player/player-context';\r\nimport {usePlayerStore} from '@common/player/hooks/use-player-store';\r\nimport {useHtmlMediaInternalState} from '@common/player/providers/html-media/use-html-media-internal-state';\r\nimport {useHtmlMediaEvents} from '@common/player/providers/html-media/use-html-media-events';\r\nimport {useHtmlMediaApi} from '@common/player/providers/html-media/use-html-media-api';\r\nimport {MediaPlayer, MediaPlayerClass, supportsMediaSource} from 'dashjs';\r\n\r\nexport default function DashProvider() {\r\n  const store = useContext(PlayerStoreContext);\r\n  const cuedMedia = usePlayerStore(s => s.cuedMedia);\r\n\r\n  // html medial element state\r\n  const videoRef = useRef<HTMLVideoElement>(null!);\r\n  const htmlMediaState = useHtmlMediaInternalState(videoRef);\r\n  const htmlMediaEvents = useHtmlMediaEvents(htmlMediaState);\r\n  const htmlMediaApi = useHtmlMediaApi(htmlMediaState);\r\n\r\n  const dash = useRef<MediaPlayerClass | undefined>();\r\n  const [dashReady, setDashReady] = useState(false);\r\n\r\n  const destroyDash = useCallback(() => {\r\n    if (dash.current) {\r\n      dash.current.destroy();\r\n      dash.current = undefined;\r\n      setDashReady(false);\r\n    }\r\n  }, []);\r\n\r\n  const setupDash = useCallback(() => {\r\n    if (!supportsMediaSource()) {\r\n      store.getState().emit('error', {fatal: true});\r\n      return;\r\n    }\r\n\r\n    const dashInstance = MediaPlayer().create();\r\n\r\n    dashInstance.on(MediaPlayer.events.ERROR, (e: any) => {\r\n      store.getState().emit('error', {sourceEvent: e});\r\n    });\r\n\r\n    dashInstance.on(MediaPlayer.events.PLAYBACK_METADATA_LOADED, () => {\r\n      const levels = dashInstance.getBitrateInfoListFor('video');\r\n      if (!levels?.length) return;\r\n\r\n      store.getState().emit('playbackQualities', {\r\n        qualities: ['auto', ...levels.map(levelToPlaybackQuality)],\r\n      });\r\n\r\n      store.getState().emit('playbackQualityChange', {quality: 'auto'});\r\n    });\r\n\r\n    dashInstance.initialize(videoRef.current, undefined, false);\r\n\r\n    // set dash instance after attaching to video element, so \"attachSource\" is called after\r\n    dash.current = dashInstance;\r\n    setDashReady(true);\r\n  }, [store]);\r\n\r\n  useEffect(() => {\r\n    setupDash();\r\n    return () => {\r\n      destroyDash();\r\n    };\r\n  }, [setupDash, destroyDash]);\r\n\r\n  useEffect(() => {\r\n    if (dash.current && cuedMedia?.src) {\r\n      dash.current.attachSource(cuedMedia.src);\r\n    }\r\n  }, [cuedMedia?.src, dashReady]);\r\n\r\n  useEffect(() => {\r\n    if (!dashReady) return;\r\n    store.setState({\r\n      providerApi: {\r\n        ...htmlMediaApi,\r\n        setPlaybackQuality: (quality: string) => {\r\n          if (!dash.current) return;\r\n\r\n          const levels = dash.current.getBitrateInfoListFor('video');\r\n          const index = levels.findIndex(\r\n            level => levelToPlaybackQuality(level) === quality\r\n          );\r\n\r\n          dash.current.updateSettings({\r\n            streaming: {\r\n              abr: {\r\n                autoSwitchBitrate: {\r\n                  video: index === -1,\r\n                },\r\n              },\r\n            },\r\n          });\r\n\r\n          if (index >= 0) {\r\n            dash.current.setQualityFor('video', index);\r\n          }\r\n\r\n          store.getState().emit('playbackQualityChange', {quality});\r\n        },\r\n      },\r\n    });\r\n  }, [store, htmlMediaApi, dashReady]);\r\n\r\n  return (\r\n    <video\r\n      className=\"h-full w-full\"\r\n      ref={videoRef}\r\n      playsInline\r\n      poster={cuedMedia?.poster}\r\n      {...htmlMediaEvents}\r\n    />\r\n  );\r\n}\r\n\r\nconst levelToPlaybackQuality = (level: any) => {\r\n  return level === -1 ? 'auto' : `${level.height}p`;\r\n};\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA,SAAwB,eAAe;AAC/B,QAAA,QAAQ,WAAW,kBAAkB;AAC3C,QAAM,YAAY,eAAe,CAAK,MAAA,EAAE,SAAS;AAG3C,QAAA,WAAW,OAAyB,IAAK;AACzC,QAAA,iBAAiB,0BAA0B,QAAQ;AACnD,QAAA,kBAAkB,mBAAmB,cAAc;AACnD,QAAA,eAAe,gBAAgB,cAAc;AAEnD,QAAM,OAAO;AACb,QAAM,CAAC,WAAW,YAAY,IAAI,SAAS,KAAK;AAE1C,QAAA,cAAc,YAAY,MAAM;AACpC,QAAI,KAAK,SAAS;AAChB,WAAK,QAAQ;AACb,WAAK,UAAU;AACf,mBAAa,KAAK;AAAA,IACpB;AAAA,EACF,GAAG,CAAE,CAAA;AAEC,QAAA,YAAY,YAAY,MAAM;AAC9B,QAAA,CAAC,uBAAuB;AAC1B,YAAM,WAAW,KAAK,SAAS,EAAC,OAAO,MAAK;AAC5C;AAAA,IACF;AAEM,UAAA,eAAe,cAAc;AAEnC,iBAAa,GAAG,YAAY,OAAO,OAAO,CAAC,MAAW;AACpD,YAAM,WAAW,KAAK,SAAS,EAAC,aAAa,GAAE;AAAA,IAAA,CAChD;AAED,iBAAa,GAAG,YAAY,OAAO,0BAA0B,MAAM;AAC3D,YAAA,SAAS,aAAa,sBAAsB,OAAO;AACzD,UAAI,EAAC,iCAAQ;AAAQ;AAEf,YAAA,SAAA,EAAW,KAAK,qBAAqB;AAAA,QACzC,WAAW,CAAC,QAAQ,GAAG,OAAO,IAAI,sBAAsB,CAAC;AAAA,MAAA,CAC1D;AAED,YAAM,WAAW,KAAK,yBAAyB,EAAC,SAAS,QAAO;AAAA,IAAA,CACjE;AAED,iBAAa,WAAW,SAAS,SAAS,QAAW,KAAK;AAG1D,SAAK,UAAU;AACf,iBAAa,IAAI;AAAA,EAAA,GAChB,CAAC,KAAK,CAAC;AAEV,YAAU,MAAM;AACJ;AACV,WAAO,MAAM;AACC;IAAA;AAAA,EACd,GACC,CAAC,WAAW,WAAW,CAAC;AAE3B,YAAU,MAAM;AACV,QAAA,KAAK,YAAW,uCAAW,MAAK;AAC7B,WAAA,QAAQ,aAAa,UAAU,GAAG;AAAA,IACzC;AAAA,EACC,GAAA,CAAC,uCAAW,KAAK,SAAS,CAAC;AAE9B,YAAU,MAAM;AACd,QAAI,CAAC;AAAW;AAChB,UAAM,SAAS;AAAA,MACb,aAAa;AAAA,QACX,GAAG;AAAA,QACH,oBAAoB,CAAC,YAAoB;AACvC,cAAI,CAAC,KAAK;AAAS;AAEnB,gBAAM,SAAS,KAAK,QAAQ,sBAAsB,OAAO;AACzD,gBAAM,QAAQ,OAAO;AAAA,YACnB,CAAA,UAAS,uBAAuB,KAAK,MAAM;AAAA,UAAA;AAG7C,eAAK,QAAQ,eAAe;AAAA,YAC1B,WAAW;AAAA,cACT,KAAK;AAAA,gBACH,mBAAmB;AAAA,kBACjB,OAAO,UAAU;AAAA,gBACnB;AAAA,cACF;AAAA,YACF;AAAA,UAAA,CACD;AAED,cAAI,SAAS,GAAG;AACT,iBAAA,QAAQ,cAAc,SAAS,KAAK;AAAA,UAC3C;AAEA,gBAAM,WAAW,KAAK,yBAAyB,EAAC,SAAQ;AAAA,QAC1D;AAAA,MACF;AAAA,IAAA,CACD;AAAA,EACA,GAAA,CAAC,OAAO,cAAc,SAAS,CAAC;AAGjC,SAAA;AAAA,IAAC;AAAA,IAAA;AAAA,MACC,WAAU;AAAA,MACV,KAAK;AAAA,MACL,aAAW;AAAA,MACX,QAAQ,uCAAW;AAAA,MAClB,GAAG;AAAA,IAAA;AAAA,EAAA;AAGV;AAEA,MAAM,yBAAyB,CAAC,UAAe;AAC7C,SAAO,UAAU,KAAK,SAAS,GAAG,MAAM,MAAM;AAChD;"}