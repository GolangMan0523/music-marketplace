{"version":3,"file":"article-body-editor-a7b26c57.mjs","sources":["../../../common/resources/client/text-editor/extensions/background-color.ts","../../../common/resources/client/text-editor/extensions/indent.ts","../../../common/resources/client/text-editor/extensions/embed.ts","../../../common/resources/client/text-editor/highlight/lowlight.ts","../../../common/resources/client/text-editor/extensions/info-block.ts","../../../common/resources/client/article-editor/article-body-editor.tsx"],"sourcesContent":["import {Extension} from '@tiptap/core';\r\nimport '@tiptap/extension-text-style';\r\n\r\nexport type ColorOptions = {\r\n  types: string[];\r\n};\r\n\r\ndeclare module '@tiptap/core' {\r\n  interface Commands<ReturnType> {\r\n    bgColor: {\r\n      setBackgroundColor: (color: string) => ReturnType;\r\n      unsetBackgroundColor: () => ReturnType;\r\n    };\r\n  }\r\n}\r\n\r\nexport const BackgroundColor = Extension.create<ColorOptions>({\r\n  name: 'backgroundColor',\r\n\r\n  addOptions() {\r\n    return {\r\n      types: ['textStyle'],\r\n    };\r\n  },\r\n\r\n  addGlobalAttributes() {\r\n    return [\r\n      {\r\n        types: this.options.types,\r\n        attributes: {\r\n          backgroundColor: {\r\n            default: null,\r\n            parseHTML: element =>\r\n              element.style.backgroundColor.replace(/['\"]+/g, ''),\r\n            renderHTML: attributes => {\r\n              if (!attributes.backgroundColor) {\r\n                return {};\r\n              }\r\n\r\n              return {\r\n                style: `background-color: ${attributes.backgroundColor}`,\r\n              };\r\n            },\r\n          },\r\n        },\r\n      },\r\n    ];\r\n  },\r\n\r\n  addCommands() {\r\n    return {\r\n      setBackgroundColor:\r\n        backgroundColor =>\r\n        ({chain}) => {\r\n          return chain().setMark('textStyle', {backgroundColor}).run();\r\n        },\r\n      unsetBackgroundColor:\r\n        () =>\r\n        ({chain}) => {\r\n          return chain()\r\n            .setMark('textStyle', {backgroundColor: null})\r\n            .removeEmptyTextStyle()\r\n            .run();\r\n        },\r\n    };\r\n  },\r\n});\r\n","import {Command, Extension} from '@tiptap/core';\r\nimport {AllSelection, TextSelection, Transaction} from 'prosemirror-state';\r\n\r\ndeclare module '@tiptap/core' {\r\n  interface Commands<ReturnType> {\r\n    indent: {\r\n      indent: () => ReturnType;\r\n      outdent: () => ReturnType;\r\n    };\r\n  }\r\n}\r\n\r\nexport const Indent = Extension.create({\r\n  name: 'indent',\r\n\r\n  addOptions: () => {\r\n    return {\r\n      types: ['listItem', 'paragraph'],\r\n      minLevel: 0,\r\n      maxLevel: 6,\r\n    };\r\n  },\r\n\r\n  addGlobalAttributes() {\r\n    return [\r\n      {\r\n        types: this.options.types,\r\n        attributes: {\r\n          indent: {\r\n            renderHTML: attributes => {\r\n              return attributes?.indent > this.options.minLevel\r\n                ? {'data-indent': attributes.indent}\r\n                : null;\r\n            },\r\n            parseHTML: element => {\r\n              const level = Number(element.getAttribute('data-indent'));\r\n              return level && level > this.options.minLevel ? level : null;\r\n            },\r\n          },\r\n        },\r\n      },\r\n    ];\r\n  },\r\n\r\n  addCommands() {\r\n    const setNodeIndentMarkup = (\r\n      tr: Transaction,\r\n      pos: number,\r\n      delta: number\r\n    ): Transaction => {\r\n      const node = tr?.doc?.nodeAt(pos);\r\n\r\n      if (node) {\r\n        const nextLevel = (node.attrs.indent || 0) + delta;\r\n        const {minLevel, maxLevel} = this.options;\r\n        const indent =\r\n          // eslint-disable-next-line no-nested-ternary\r\n          nextLevel < minLevel\r\n            ? minLevel\r\n            : nextLevel > maxLevel\r\n            ? maxLevel\r\n            : nextLevel;\r\n\r\n        if (indent !== node.attrs.indent) {\r\n          const {indent: oldIndent, ...currentAttrs} = node.attrs;\r\n          const nodeAttrs =\r\n            indent > minLevel ? {...currentAttrs, indent} : currentAttrs;\r\n          return tr.setNodeMarkup(pos, node.type, nodeAttrs, node.marks);\r\n        }\r\n      }\r\n      return tr;\r\n    };\r\n\r\n    const updateIndentLevel = (tr: Transaction, delta: number): Transaction => {\r\n      const {doc, selection} = tr;\r\n\r\n      if (\r\n        doc &&\r\n        selection &&\r\n        (selection instanceof TextSelection ||\r\n          selection instanceof AllSelection)\r\n      ) {\r\n        const {from, to} = selection;\r\n        doc.nodesBetween(from, to, (node, pos) => {\r\n          if (this.options.types.includes(node.type.name)) {\r\n            tr = setNodeIndentMarkup(tr, pos, delta);\r\n            return false;\r\n          }\r\n\r\n          return true;\r\n        });\r\n      }\r\n\r\n      return tr;\r\n    };\r\n    const applyIndent: (direction: number) => () => Command =\r\n      direction =>\r\n      () =>\r\n      ({tr, state, dispatch}) => {\r\n        const {selection} = state;\r\n        tr = tr.setSelection(selection);\r\n        tr = updateIndentLevel(tr, direction);\r\n\r\n        if (tr.docChanged) {\r\n          dispatch?.(tr);\r\n          return true;\r\n        }\r\n\r\n        return false;\r\n      };\r\n\r\n    return {\r\n      indent: applyIndent(1),\r\n      outdent: applyIndent(-1),\r\n    };\r\n  },\r\n\r\n  addKeyboardShortcuts() {\r\n    return {\r\n      Tab: ({editor}) => {\r\n        if (editor.state.selection.to > editor.state.selection.from) {\r\n          return this.editor.commands.indent();\r\n        }\r\n        return false;\r\n      },\r\n      'Shift-Tab': ({editor}) => {\r\n        if (editor.state.selection.to > editor.state.selection.from) {\r\n          return this.editor.commands.outdent();\r\n        }\r\n        return false;\r\n      },\r\n    };\r\n  },\r\n});\r\n","import {mergeAttributes, Node} from '@tiptap/react';\r\n\r\ndeclare module '@tiptap/core' {\r\n  interface Commands<ReturnType> {\r\n    embed: {\r\n      setEmbed: (options: {src: string}) => ReturnType;\r\n    };\r\n  }\r\n}\r\n\r\nexport const Embed = Node.create({\r\n  name: 'embed',\r\n  group: 'block',\r\n  atom: true,\r\n\r\n  addAttributes() {\r\n    return {\r\n      src: {\r\n        default: null,\r\n      },\r\n    };\r\n  },\r\n\r\n  parseHTML() {\r\n    return [\r\n      {\r\n        tag: 'iframe',\r\n      },\r\n    ];\r\n  },\r\n\r\n  renderHTML({HTMLAttributes}) {\r\n    return [\r\n      'iframe',\r\n      mergeAttributes(this.options.HTMLAttributes, HTMLAttributes),\r\n    ];\r\n  },\r\n\r\n  addCommands() {\r\n    return {\r\n      setEmbed:\r\n        options =>\r\n        ({commands}) => {\r\n          return commands.insertContent({\r\n            type: this.name,\r\n            attrs: options,\r\n          });\r\n        },\r\n    };\r\n  },\r\n});\r\n","import {createLowlight} from 'lowlight';\r\n\r\n// load specific languages only\r\nimport javascript from 'highlight.js/lib/languages/javascript';\r\nimport typescript from 'highlight.js/lib/languages/typescript';\r\nimport html from 'highlight.js/lib/languages/xml';\r\nimport css from 'highlight.js/lib/languages/css';\r\nimport php from 'highlight.js/lib/languages/php';\r\nimport shell from 'highlight.js/lib/languages/shell';\r\nimport bash from 'highlight.js/lib/languages/bash';\r\nimport ruby from 'highlight.js/lib/languages/ruby';\r\nimport python from 'highlight.js/lib/languages/python';\r\nimport java from 'highlight.js/lib/languages/java';\r\nimport c from 'highlight.js/lib/languages/c';\r\n\r\n// load css\r\nimport './highlight-material-palenight.css';\r\n\r\nconst lowlight = createLowlight();\r\nlowlight.register('javascript', javascript);\r\nlowlight.register('typescript', typescript);\r\nlowlight.register('html', html);\r\nlowlight.register('css', css);\r\nlowlight.register('php', php);\r\nlowlight.register('shell', shell);\r\nlowlight.register('bash', bash);\r\nlowlight.register('ruby', ruby);\r\nlowlight.register('python', python);\r\nlowlight.register('java', java);\r\nlowlight.register('c', c);\r\n\r\nexport {lowlight};\r\n","import {mergeAttributes, Node} from '@tiptap/react';\r\n\r\ndeclare module '@tiptap/core' {\r\n  interface Commands<ReturnType> {\r\n    important: {\r\n      addInfo: (attributes: {\r\n        type: 'important' | 'warning' | 'success';\r\n      }) => ReturnType;\r\n    };\r\n  }\r\n}\r\n\r\nexport const InfoBlock = Node.create({\r\n  name: 'be-info-block',\r\n  group: 'block',\r\n  content: 'inline*',\r\n  defining: true,\r\n\r\n  addAttributes() {\r\n    return {\r\n      type: {\r\n        default: 'success',\r\n        renderHTML: attrs => {\r\n          return {class: attrs.type};\r\n        },\r\n      },\r\n    };\r\n  },\r\n\r\n  parseHTML() {\r\n    return [\r\n      {\r\n        tag: 'div',\r\n        getAttrs: node =>\r\n          (node as HTMLElement).classList.contains('info-block') && null,\r\n      },\r\n    ];\r\n  },\r\n\r\n  renderHTML({HTMLAttributes}) {\r\n    return [\r\n      'div',\r\n      mergeAttributes(HTMLAttributes, {\r\n        class: 'info-block',\r\n      }),\r\n      ['div', {class: 'title'}, 'Important:'],\r\n      ['p', 0],\r\n    ];\r\n  },\r\n\r\n  addCommands() {\r\n    return {\r\n      addInfo:\r\n        attributes =>\r\n        ({commands}) => {\r\n          return commands.setNode(this.name, attributes);\r\n        },\r\n    };\r\n  },\r\n});\r\n","import {Editor, EditorContent, FocusPosition, useEditor} from '@tiptap/react';\r\nimport StarterKit from '@tiptap/starter-kit';\r\nimport {Underline} from '@tiptap/extension-underline';\r\nimport {Link as LinkExtension} from '@tiptap/extension-link';\r\nimport Image from '@tiptap/extension-image';\r\nimport {ReactElement, useEffect, useRef} from 'react';\r\nimport {Superscript} from '@tiptap/extension-superscript';\r\nimport {Subscript} from '@tiptap/extension-subscript';\r\nimport {Color} from '@tiptap/extension-color';\r\nimport {TextStyle} from '@tiptap/extension-text-style';\r\nimport {TextAlign} from '@tiptap/extension-text-align';\r\nimport {CodeBlockLowlight} from '@tiptap/extension-code-block-lowlight';\r\nimport {BackgroundColor} from '@common/text-editor/extensions/background-color';\r\nimport {Indent} from '@common/text-editor/extensions/indent';\r\nimport {Embed} from '@common/text-editor/extensions/embed';\r\nimport {lowlight} from '@common/text-editor/highlight/lowlight';\r\nimport {InfoBlock} from '@common/text-editor/extensions/info-block';\r\nimport {useCallbackRef} from '@common/utils/hooks/use-callback-ref';\r\nimport {Extension} from '@tiptap/core';\r\n\r\ninterface Props {\r\n  initialContent?: string;\r\n  onLoad?: (editor: Editor) => void;\r\n  children: (content: ReactElement, editor: Editor) => ReactElement;\r\n  minHeight?: string;\r\n  onCtrlEnter?: () => void;\r\n  autoFocus?: FocusPosition;\r\n}\r\nexport default function ArticleBodyEditor({\r\n  initialContent = '',\r\n  children,\r\n  onLoad: _onLoad,\r\n  onCtrlEnter,\r\n  minHeight = 'min-h-320',\r\n  autoFocus,\r\n}: Props) {\r\n  const onLoad = useCallbackRef(_onLoad);\r\n  const calledOnLoad = useRef(false);\r\n\r\n  const extensions = [\r\n    StarterKit.configure({\r\n      codeBlock: false,\r\n    }),\r\n    Underline,\r\n    LinkExtension.extend({\r\n      inclusive: false,\r\n      validate: {\r\n        // only linkify links that start with a protocol\r\n        url: (value: string) => /^https?:\\/\\//.test(value),\r\n      },\r\n    }),\r\n    Image,\r\n    Superscript,\r\n    Subscript,\r\n    TextStyle,\r\n    Color,\r\n    BackgroundColor,\r\n    Indent,\r\n    CodeBlockLowlight.configure({\r\n      lowlight,\r\n    }),\r\n    TextAlign.configure({\r\n      types: ['heading', 'paragraph'],\r\n    }),\r\n    InfoBlock,\r\n    Embed,\r\n  ];\r\n\r\n  if (onCtrlEnter) {\r\n    extensions.push(\r\n      Extension.create({\r\n        addKeyboardShortcuts: () => ({\r\n          'Cmd-Enter'() {\r\n            onCtrlEnter();\r\n            return true;\r\n          },\r\n          'Ctrl-Enter'() {\r\n            onCtrlEnter();\r\n            return true;\r\n          },\r\n        }),\r\n      }),\r\n    );\r\n  }\r\n\r\n  const editor = useEditor({\r\n    extensions,\r\n    onFocus: () => {},\r\n    autofocus: autoFocus,\r\n    content: initialContent,\r\n  });\r\n\r\n  // destroy editor\r\n  useEffect(() => {\r\n    if (editor) {\r\n      return () => editor.destroy();\r\n    }\r\n  }, [editor]);\r\n\r\n  if (!editor) {\r\n    return null;\r\n  }\r\n\r\n  if (editor && onLoad && !calledOnLoad.current) {\r\n    onLoad(editor);\r\n    calledOnLoad.current = true;\r\n  }\r\n\r\n  return children(\r\n    <EditorContent className={minHeight} editor={editor} />,\r\n    editor,\r\n  );\r\n}\r\n"],"names":["LinkExtension"],"mappings":"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"}