{"version":3,"file":"billing-redirect-message-73faaedb.mjs","sources":["../../../common/resources/client/billing/checkout/stripe/use-stripe.ts","../../../common/resources/client/billing/checkout/stripe/stripe-elements-form.tsx","../../../common/resources/client/billing/billing-redirect-message.tsx"],"sourcesContent":["import {useEffect, useRef, useState} from 'react';\r\nimport {loadStripe, Stripe, StripeElements} from '@stripe/stripe-js';\r\nimport {apiClient} from '@common/http/query-client';\r\nimport {useSelectedLocale} from '@common/i18n/selected-locale';\r\nimport {useAuth} from '@common/auth/use-auth';\r\nimport {useIsDarkMode} from '@common/ui/themes/use-is-dark-mode';\r\nimport {useSettings} from '@common/core/settings/use-settings';\r\n\r\ninterface UseStripeProps {\r\n  type: 'setupIntent' | 'subscription';\r\n  productId?: string | number;\r\n  priceId?: string | number;\r\n}\r\nexport function useStripe({type, productId, priceId}: UseStripeProps) {\r\n  const {user} = useAuth();\r\n  const isDarkMode = useIsDarkMode();\r\n  const isInitiatedRef = useRef<boolean>(false);\r\n  const paymentElementRef = useRef<HTMLDivElement>(null);\r\n  const {localeCode} = useSelectedLocale();\r\n  const [stripe, setStripe] = useState<Stripe | null>(null);\r\n  const [elements, setElements] = useState<StripeElements | null>(null);\r\n  const {\r\n    branding: {site_name},\r\n    billing: {\r\n      stripe_public_key,\r\n      stripe: {enable},\r\n    },\r\n  } = useSettings();\r\n\r\n  useEffect(() => {\r\n    if (!enable || !stripe_public_key || isInitiatedRef.current) return;\r\n\r\n    Promise.all([\r\n      // load stripe js library\r\n      loadStripe(stripe_public_key, {\r\n        apiVersion: '2022-08-01',\r\n        locale: localeCode as any,\r\n      }),\r\n      // create partial subscription for clientSecret\r\n      type === 'setupIntent'\r\n        ? createSetupIntent()\r\n        : createSubscription(productId!, priceId),\r\n    ]).then(([stripe, {clientSecret}]) => {\r\n      if (stripe && paymentElementRef.current) {\r\n        const elements = stripe.elements({\r\n          clientSecret,\r\n          appearance: {\r\n            theme: isDarkMode ? 'night' : 'stripe',\r\n          },\r\n        });\r\n\r\n        // Create and mount the Payment Element\r\n        const paymentElement = elements.create('payment', {\r\n          business: {name: site_name},\r\n          terms: {card: 'never'},\r\n          fields: {\r\n            billingDetails: {\r\n              address: 'auto',\r\n            },\r\n          },\r\n          defaultValues: {\r\n            billingDetails: {\r\n              email: user?.email,\r\n            },\r\n          },\r\n        });\r\n        paymentElement.mount(paymentElementRef.current);\r\n\r\n        setStripe(stripe);\r\n        setElements(elements);\r\n      }\r\n    });\r\n\r\n    isInitiatedRef.current = true;\r\n  }, [\r\n    productId,\r\n    stripe_public_key,\r\n    enable,\r\n    isDarkMode,\r\n    localeCode,\r\n    site_name,\r\n    type,\r\n    user?.email,\r\n  ]);\r\n\r\n  return {\r\n    stripe,\r\n    elements,\r\n    paymentElementRef,\r\n    stripeIsEnabled: stripe_public_key != null && enable,\r\n  };\r\n}\r\n\r\nfunction createSetupIntent(): Promise<{clientSecret: string}> {\r\n  return apiClient.post('billing/stripe/create-setup-intent').then(r => r.data);\r\n}\r\n\r\nfunction createSubscription(\r\n  productId: number | string,\r\n  priceId?: number | string\r\n): Promise<{clientSecret: string}> {\r\n  return apiClient\r\n    .post('billing/stripe/create-partial-subscription', {\r\n      product_id: productId,\r\n      price_id: priceId,\r\n    })\r\n    .then(r => r.data);\r\n}\r\n","import clsx from 'clsx';\r\nimport {Button} from '@common/ui/buttons/button';\r\nimport {FormEventHandler, Fragment, ReactNode, useState} from 'react';\r\nimport {useStripe} from '@common/billing/checkout/stripe/use-stripe';\r\nimport {Skeleton} from '@common/ui/skeleton/skeleton';\r\n\r\ninterface StripeElementsFormProps {\r\n  productId?: string | number;\r\n  priceId?: string | number;\r\n  type: 'setupIntent' | 'subscription';\r\n  submitLabel: ReactNode;\r\n  returnUrl: string;\r\n}\r\nexport function StripeElementsForm({\r\n  productId,\r\n  priceId,\r\n  type = 'subscription',\r\n  submitLabel,\r\n  returnUrl,\r\n}: StripeElementsFormProps) {\r\n  const {stripe, elements, paymentElementRef, stripeIsEnabled} = useStripe({\r\n    type,\r\n    productId,\r\n    priceId,\r\n  });\r\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  // disable upgrade button if stripe is enabled, but not loaded yet\r\n  const stripeIsReady: boolean =\r\n    !stripeIsEnabled || (elements != null && stripe != null);\r\n\r\n  const handleSubmit: FormEventHandler = async e => {\r\n    e.preventDefault();\r\n\r\n    // stripe has not loaded yet\r\n    if (!stripe || !elements) return;\r\n\r\n    setIsSubmitting(true);\r\n\r\n    try {\r\n      const method =\r\n        type === 'subscription' ? 'confirmPayment' : 'confirmSetup';\r\n      const result = await stripe[method]({\r\n        elements,\r\n        confirmParams: {\r\n          return_url: returnUrl,\r\n        },\r\n      });\r\n\r\n      // don't show validation error as it will be shown already by stripe payment element\r\n      if (result.error?.type !== 'validation_error' && result.error?.message) {\r\n        setErrorMessage(result.error.message);\r\n      }\r\n    } catch {}\r\n\r\n    setIsSubmitting(false);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div\r\n        ref={paymentElementRef}\r\n        className={clsx('min-h-[303px]', !stripeIsEnabled && 'hidden')}\r\n      >\r\n        {stripeIsEnabled && <StripeSkeleton />}\r\n      </div>\r\n      {errorMessage && !isSubmitting && (\r\n        <div className=\"mt-20 text-danger\">{errorMessage}</div>\r\n      )}\r\n      <Button\r\n        variant=\"flat\"\r\n        color=\"primary\"\r\n        size=\"md\"\r\n        className=\"mt-40 w-full\"\r\n        type=\"submit\"\r\n        disabled={isSubmitting || !stripeIsReady}\r\n      >\r\n        {submitLabel}\r\n      </Button>\r\n    </form>\r\n  );\r\n}\r\n\r\nfunction StripeSkeleton() {\r\n  return (\r\n    <Fragment>\r\n      <Skeleton className=\"mb-20 h-30\" />\r\n      <Skeleton className=\"mb-20 h-30\" />\r\n      <Skeleton className=\"mb-20 h-30\" />\r\n      <Skeleton className=\"h-30\" />\r\n    </Fragment>\r\n  );\r\n}\r\n","import {MessageDescriptor} from '../i18n/message-descriptor';\r\nimport {Link, To} from 'react-router-dom';\r\nimport {AnimatePresence, m} from 'framer-motion';\r\nimport {TaskAltIcon} from '../icons/material/TaskAlt';\r\nimport {ErrorIcon} from '../icons/material/Error';\r\nimport {Trans} from '../i18n/trans';\r\nimport {Button} from '../ui/buttons/button';\r\nimport {Skeleton} from '../ui/skeleton/skeleton';\r\nimport {opacityAnimation} from '../ui/animation/opacity-animation';\r\n\r\nexport interface BillingRedirectMessageConfig {\r\n  message: MessageDescriptor;\r\n  status: 'success' | 'error';\r\n  link: To;\r\n  buttonLabel: MessageDescriptor;\r\n}\r\n\r\ninterface BillingRedirectMessageProps {\r\n  config?: BillingRedirectMessageConfig;\r\n}\r\nexport function BillingRedirectMessage({config}: BillingRedirectMessageProps) {\r\n  return (\r\n    <AnimatePresence initial={false} mode=\"wait\">\r\n      <div className=\"mt-80\">\r\n        {config ? (\r\n          <m.div\r\n            className=\"text-center\"\r\n            key=\"payment-status\"\r\n            {...opacityAnimation}\r\n          >\r\n            {config.status === 'success' ? (\r\n              <TaskAltIcon className=\"text-positive text-6xl\" />\r\n            ) : (\r\n              <ErrorIcon className=\"text-danger text-6xl\" />\r\n            )}\r\n            <div className=\"text-2xl font-semibold mt-30\">\r\n              <Trans {...config.message} />\r\n            </div>\r\n            <Button\r\n              variant=\"flat\"\r\n              color=\"primary\"\r\n              className=\"w-full mt-30\"\r\n              size=\"md\"\r\n              elementType={Link}\r\n              to={config.link}\r\n            >\r\n              <Trans {...config.buttonLabel} />\r\n            </Button>\r\n          </m.div>\r\n        ) : (\r\n          <LoadingSkeleton key=\"loading-skeleton\" />\r\n        )}\r\n      </div>\r\n    </AnimatePresence>\r\n  );\r\n}\r\n\r\nfunction LoadingSkeleton() {\r\n  return (\r\n    <m.div\r\n      className=\"text-center max-w-280\"\r\n      key=\"loading-skeleton\"\r\n      {...opacityAnimation}\r\n    >\r\n      <Skeleton size=\"w-50 h-50\" variant=\"rect\" />\r\n      <Skeleton className=\"text-2xl mt-30\" />\r\n      <Skeleton size=\"h-42\" className=\"mt-30\" />\r\n    </m.div>\r\n  );\r\n}\r\n"],"names":["stripe","elements"],"mappings":"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"}